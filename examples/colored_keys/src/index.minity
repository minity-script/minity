// Declare the namespace. This is where all the following functions will go.
namespace colored_keys

var $enabled

if ($enabled>0) update_all_locks()

function enable {
  $enabled = 1
  update_all_locks()
}

function disable {
  $enabled = 0
}


tag is_lock
tag is_dead_lock
tag is_blue_lock
tag is_red_lock
tag is_key
tag is_blue_key
tag is_red_key
tag is_book


macro do_update_locks(?is_lock,?is_key,?delta=1) {
  for @s.?is_lock {
    up ?delta if (@a[distance = ..2]{
      Inventory:[{
        tag:{Tags:["{.is_key}"]}
      }]
    }) {
      down ?delta setblock redstone_block
    } else {
       down ?delta setblock glass
    } 
  }
}

if ($enabled) update_locks() else update_locks()

macro update_locks(?color,?delta=1) {
  do_update_locks("is_{?color}_lock","{.is_{?color}_key}",?delta)
}

function update_all_locks {
  for @e.is_lock {
    unless air {
      update_locks(blue)
      update_locks(red)
    } else {
      /say i am dead
      tag @s is_dead_lock 
      untag @s is_lock  
      after 3s {
        /say reviving
        for @e.is_dead_lock {
          untag @s is_dead_lock 
          tag @s is_lock 
          setblock glass
        }        
      }
    }
  }
  after 2t {
    if ( $enabled > 0)  update_all_locks()
  }
}

macro give_lock(?color,?Color,?textColor=white) {
  give @s command_block{
   display: {
     Name:  json [ {
       color: "{?textColor}",
       text: "Place {?Color} Lock",
       italic: 0b
     }],
     Lore: [
       json [{
         text: "Place this command block to create a {?color} lock.",
         italic: false
       }] 
     ]
   },
   BlockEntityTag:{
     auto: 1b,
     Command: "function colored_keys:summon_{?color}_lock"
   }
  } 
}

function give_blue_lock {
  give_lock(blue,Blue,aqua)
}

function give_red_lock {
  give_lock(red,Red,red)  
}
macro summon_lock(?color,?Color) {
  down 0.5 summon slime{
    CustomName: json "{?Color} Lock",
    Invulnerable: true,
    Silent: true,
    Size: 0.5d,
    Tags:["{.is_{?color}_lock}","{.is_lock}"]
  } then {
    @s::NoAI = true
  }
}

function summon_blue_lock {
  summon_lock(blue, Blue)
}

function summon_red_lock {
  summon_lock(red, Red)
}

macro give_key(?color, ?Color, ?baseColor) {
  give @s shield{
    display: {
      Name: json <r color=?color>{?Color} Key</r>,
      Lore: [ 
        json [{
          "text":"This key opens {?color} doors.",
          "italic":false
        }]
      ]
    },
    Tags: ["{.is_key}","{.is_{?color}_key}"],
    //"{.is_key}": 1b,
    //"{.is_{?color}_key}":1b,
    BlockEntityTag: {
      Base: ?baseColor,
      Patterns: [
        { Color: 15, Pattern:"mc" },
        { Color: 15, Pattern:"bt" },
        { Color: ?baseColor, Pattern:"bo" }
      ]
    }
  }
}

function give_blue_key {
  give_key(blue,Blue,3)
}

function give_red_key {
  give_key(red,Red,14)
}

as @a[nbt={Inventory:[{tag:{is_book:1b}}]}] {
  /clear @s minecraft:written_book{is_book:1b}
  give_book()
} 

import "./give_book" 