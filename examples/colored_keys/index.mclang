// Declare the namespace. This is where all the following functions will go.
namespace tutorial

// use /<commend...> to execute minecraft commands. This is useful
// for reusing generated commands from the web, or for commands 
// that don't have syntax sugar provided by McLang
/say Hello World

// All the statements in the root scope of the namespace will be
// executed on (re)load.
/say  Tutorial loaded

// Declare an integer variable that will be available in this namespace.
// Variables are stored on the scoreboard under namespaced identifiers
// so you don't need to worry about name clashes with other namespaces.
var $enabled = 1

// Define a function in the current namespaces. You
function enable {
  $enabled = 1
}

function disable {
  $enabled = 0
}

tag is_lock
tag is_dead_lock
tag is_blue_lock
tag is_red_lock
tag is_key
tag is_blue_key
tag is_red_key
tag is_book


macro do_update_locks(?is_lock,?is_key,?delta=1) {
  for @s.?is_lock {
    up ?delta 
    if @p[ distance = ..2, nbt = {
      Inventory:[{
        tag:{ "{.is_key}":1b }
      }]
    }] {
      down ?delta setblock minecraft:redstone_block
    } else {
      down ?delta setblock minecraft:glass
    } 
  }
}

macro update_locks(?color,?delta=1) {
  do_update_locks("is_{?color}_lock","{.is_{?color}_key}",?delta)
}

function update_all_locks #minecraft:tick {
  if $enabled > 0 {
    for nearest 3 @slime.is_lock {
      unless air {
        update_locks(blue)
        update_locks(red)
      } else {
        /say i am dead
        tag @s is_dead_lock
        untag @s is_lock
        after 3s {
          /say reviving
          for @slime.is_dead_lock {
            untag @s is_dead_lock
            tag @s is_lock
            setblock minecraft:glass
          }        
        }
      }
    }
  } 
}

macro give_lock(?color,?Color,?textColor=white) {
  give @s command_block {
   display: {
     Name:  json [ {
       color: "{?textColor}",
       text: "Place {?Color} Lock",
       italic: 0b
     }],
     Lore: [
       json [{
         text: "Place this command block to create a {?color} lock.",
         italic: false
       }] 
     ]
   },
   BlockEntityTag:{
     auto: 1b,
     Command: "function colored_keys:summon_{?color}_lock"
   }
  } 
}

&foo{} ={tags:[{name:a,value:3},{name:b,value:1}]}
function give_blue_lock {
  as @p {
   give_lock(blue,Blue,aqua)
  }
}

function give_red_lock {
  as @p {
     give_lock(red,Red,red)
  }
  
}
macro summon_lock(?color,?Color) {
  /summon minecraft:slime ~ ~-0.5 ~ {CustomName:'"{?Color} Lock"',Invulnerable:1b,NoAI:1b,Silent:1b,Tags:["{.is_lock}","{.is_{?color}_lock}"]}
}

function summon_blue_lock {
  summon_lock(blue, Blue)
}

function summon_red_lock {
  summon_lock(red, Red)
}

macro give_key(?color, ?Color, ?baseColor) {
  give @s shield{
    display: {
      Name: json [{
        "text":"{?Color} Key",
        "italic":false
      }],
      Lore: [ 
        json [{
          "text":"This key opens {?color} doors.",
          "italic":false
        }]
      ]
    },
    Tags: ["{.is_key}","{.is_{?color}_key}"],
    "{.is_key}": 1b,
    "{.is_{?color}_key}":1b,
    BlockEntityTag: {
      Base: ?baseColor,
      Patterns: [
        { Color: 15, Pattern:"mc" },
        { Color: 15, Pattern:"bt" },
        { Color: ?baseColor, Pattern:"bo" }
      ]
    }
  }
}

function give_blue_key {
  give_key(blue,Blue,3)
}

function give_red_key {
  give_key(red,Red,14)
}

as @a[nbt={Inventory:[{tag:{is_book:1b}}]}] {
  /clear @s minecraft:written_book{is_book:1b}
  give_book()
}

function give_book {
  give @s written_book {
    is_book: 1b,
    "pages": [
      json { 
        text: "", 
        bold:false, 
        extra: [        
          { bold: true, text:"COLORED KEYS" },
          { text:"\n\nGet Key\n" },
          {
            color: dark_red, 
            bold: true,
            text: "\u2588",
            clickEvent: {
              action: run_command,
              value: "/function colored_keys:give_red_key",
            }
          }, " ",
          {
            bold: true,
            color: dark_green, 
            text: "\u2588",
            clickEvent: {
              action: run_command,
              value: "/function colored_keys:give_green_key",
            }
          }, " ",
          {
            bold: true,
            color: dark_aqua, 
            text: "\u2588",
            clickEvent: {
              action: run_command,
              value: "/function colored_keys:give_blue_key",
            }
          }, " ",
          {
            bold: true,
            color: gold, 
            text: "\u2588",
            clickEvent: {
              action: run_command,
              value: "/function colored_keys:give_yellow_key",
            }
          },
              { text:"\n\nGet Lock\n" },
          {
            color: dark_red, 
            bold: true,
            text: "\u2588",
            clickEvent: {
              action: run_command,
              value: "/function colored_keys:give_red_lock",
            }
          }, " ",
          {
            bold: true,
            color: dark_green, 
            text: "\u2588",
            clickEvent: {
              action: run_command,
              value: "/function colored_keys:give_green_lock",
            }
          }, " ",
          {
            bold: true,
            color: dark_aqua, 
            text: "\u2588",
            clickEvent: {
              action: run_command,
              value: "/function colored_keys:give_blue_lock",
            }
          }, " ",
          {
            bold: true,
            color: gold, 
            text: "\u2588",
            clickEvent: {
              action: run_command,
              value: "/function colored_keys:give_yellow_lock",
            }
          },
        ]
      },
    ],
    "title":"Colored Keys Handbook",
    "author":"yockz",
    "display":{
      "Lore":[
          "Commands and instructions for Colored Keys"
        ]
      }
    }
  }