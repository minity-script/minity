// Declare the namespace. This is where all the following functions will go.
namespace tutorial

// use /<command...> to execute minecraft commands. This is useful
// for reusing generated commands from the web, or for commands 
// that don't have syntax sugar provided by McLang
/say something

// All the statements in the root scope of the namespace will be
// executed on (re)load.
/say Tutorial loaded

// Define a function which will be stored in separate .mcfunction 
// files in your namespace. 

macro hello(?a=3) {
  /say hi
}

function hello {
  /say Hello World!
}

// You can execute them with /function ns:name in Minecraft chat, 
// or with name() in mclang. 

hello() 

// Declare an  integer variables that will be available in this namespace.
// Variables are stored on the scoreboard under namespaced identifiers
// so you don't need to worry about name clashes with other namespaces.
var $count = 0

// If we don't assign a value to the variable, it will be retained from
// between reloads.
var $enabled

// Print out your variable using the mclang print command
print Count is $count, should be 0

// You can do basic arithmetics on your variables
// The value on the right can be anything that is or returns an integer, 
// including variables, entity scores, NBT paths and commands
// Avaliable operators are ++, --, -=, *=, 
$count ++         // now 1
$count *= 3       // now 3
$count /= $count  // now 1 again
print Count is $count, should be 1

// If you declare a variable within a function, it will be separate
// from any global variables with the same name. Function-local variables
// are shared between all calls to the function.

var $result = 0

function once_more {
  var $count 
  // we didn't assign a value to $count, so it will keep its value
  // when we call the function again

  $count ++
  $result ++
  print You called me $count times, result is now $result
}

once_more()
once_more()
once_more()
print Count is $count, should still be 1, but result is $result


// You can also store integer values on entities. These are called entity scores.
// The same naming rules and scoping rules apply for them as for variables.

score was_present

function check_players {
  @a->was_present += $count
}

check_players()
print "@p->was_present"

function ray_cast {
  unless (minecraft:stone) {
    north 1 ray_cast()
  } else {
    setblock air
  }
}
